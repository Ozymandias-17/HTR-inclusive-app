import os
import io
import zipfile
import re
import pandas as pd
from PIL import Image

import streamlit as st
from css_vars import NORMAL_CSS, ACCESSIBLE_CSS

from llm import llm_solution, TEI_rules
from speech_generator import generate_speech

# -----------------------
# –ü–µ—Ä–≤–∏—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã 
# -----------------------
st.set_page_config(page_title="–ü—Ä–æ–µ–∫—Ç ¬´–ü–æ–Ω—è—Ç–Ω—ã–º —è–∑—ã–∫–æ–º¬ª",
                   page_icon="üìú",
                   layout="centered")


# -----------------------
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ 
# -----------------------
DATASET_DIR = "./data/Authors_Manusripts"
# –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
if not os.path.exists(DATASET_DIR):
    try:
        os.makedirs(DATASET_DIR, exist_ok=True)
        print(f"INFO: Directory {DATASET_DIR} created.") 
    except OSError as e:
        st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é {DATASET_DIR}: {e}")
        st.stop() 

def list_authors():
    return sorted([d for d in os.listdir(DATASET_DIR) if os.path.isdir(os.path.join(DATASET_DIR, d))])

def list_archive_types(author):
    path = os.path.join(DATASET_DIR, author)

    if not os.path.isdir(path):
        return []
    return sorted([d for d in os.listdir(path) if os.path.isdir(os.path.join(path, d))])

def list_archives(author, archive_type):
    path = os.path.join(DATASET_DIR, author, archive_type)
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø—É—Ç–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫
    if not os.path.isdir(path):
        return []
    return sorted([d for d in os.listdir(path) if os.path.isdir(os.path.join(path, d))])

def load_metadata(author, archive_type, archive_title):
    meta_path = os.path.join(DATASET_DIR, author, archive_type, archive_title, "meta_data.xlsx")
    if os.path.exists(meta_path):
        try:
            # —ç—Ç–æ –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –æ—à–∏–±–∫—É, –µ—Å–ª–∏ pandas —Ç—Ä–µ–±—É–µ—Ç –µ–≥–æ –¥–ª—è .xlsx
            return pd.read_excel(meta_path, index_col=0)
        except Exception: 
             return None
    return None

def get_image_paths(author, archive_type, archive_title):
    folder = os.path.join(DATASET_DIR, author, archive_type, archive_title)
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–∞–ø–∫–∏
    if not os.path.isdir(folder):
        return []
    try:
        images = sorted([os.path.join(folder, f) for f in os.listdir(folder) if f.lower().endswith('.png')])
        return images
    except Exception: 
        return []


def download_images_zip(author, archive_type, archive_title):
    folder = os.path.join(DATASET_DIR, author, archive_type, archive_title)
    buffer = io.BytesIO()
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–∞–ø–∫–∏
    if not os.path.isdir(folder):
        buffer.seek(0)
        return buffer
    try:
        with zipfile.ZipFile(buffer, "w") as zip_file:
            for file in os.listdir(folder):
                if file.lower().endswith('.png'):
                    file_path = os.path.join(folder, file)
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —ç—Ç–æ —Ñ–∞–π–ª, –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º
                    if os.path.isfile(file_path):
                        zip_file.write(file_path, arcname=file)
    except Exception:
         buffer = io.BytesIO() # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä –ø—Ä–∏ –æ—à–∏–±–∫–µ
    buffer.seek(0)
    return buffer

def download_pdf(author, archive_type, archive_title):
    images_paths = get_image_paths(author, archive_type, archive_title)
    images = []
    for img_path in images_paths:
        if os.path.isfile(img_path):
            try:
                with Image.open(img_path) as img:
                    images.append(img.convert("RGB"))
            except Exception:
                continue
    
    buffer = io.BytesIO()
    if images:
        try: 
            images[0].save(buffer, save_all=True, append_images=images[1:], format="PDF")
        except Exception:
             buffer = io.BytesIO() # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä –ø—Ä–∏ –æ—à–∏–±–∫–µ
    buffer.seek(0)
    return buffer

# -----------------------
# Intro Page: –≤—ã–±–æ—Ä –≤–µ—Ä—Å–∏–∏ 
# -----------------------
def show_intro_page():
    st.title("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
    st.write("–≠—Ç–æ –ø—Ä–æ–µ–∫—Ç ¬´–ü–æ–Ω—è—Ç–Ω—ã–º —è–∑—ã–∫–æ–º¬ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä—Å–∏—é —Å–∞–π—Ç–∞:")

    st.markdown(
        """
        <style>
        div.stButton > button:first-child {
            background-color: #6F4E37;
            color: #FFF8DC;
            border: none;
            border-radius: 10px;
            padding: 20px 40px;
            font-size: 20px;
            font-weight: bold;
            width: 250px;
            height: 150px;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto;
        }
        div.stButton > button:first-child:hover {
            background-color: #4A3C30;
        }
        .st-emotion-cache-1v0mbdj {
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 50px;
        }
        </style>
        """,
        unsafe_allow_html=True,
    )

    col1, col2 = st.columns(2)
    with col1:
        if st.button("–û–±—ã—á–Ω–∞—è –≤–µ—Ä—Å–∏—è"):
            st.session_state["accessibility_mode"] = "normal"
            st.rerun()
    with col2:
        if st.button("–ò–Ω–∫–ª—é–∑–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è"):
            st.session_state["accessibility_mode"] = "accessible"
            st.rerun()

# Callback —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–∑ –ø–æ–∏—Å–∫–∞ 
def select_archive_callback(author, archive_type, archive):
    # –û–±–Ω–æ–≤–ª—è–µ—Ç session_state –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞—Ä—Ö–∏–≤–∞
    st.session_state["selected_archive"] = {
        "author": author,
        "archive_type": archive_type,
        "archive": archive
    }
    # –£–±–∏—Ä–∞–µ–º –≤—ã–±–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω –±—ã–ª, –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –Ω–æ–≤–æ–º—É –∞—Ä—Ö–∏–≤—É
    if "selected_image" in st.session_state:
        st.session_state.pop("selected_image")

# -----------------------
# –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
# -----------------------
def main_app():
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ 
    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ KeyError –Ω–∞ —Å–ª—É—á–∞–π –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∫–ª—é—á–∞
    try:
        if st.session_state["accessibility_mode"] == "normal":
            st.markdown(NORMAL_CSS, unsafe_allow_html=True)
        else:
            st.markdown(ACCESSIBLE_CSS, unsafe_allow_html=True)
    except KeyError:
        # –ï—Å–ª–∏ —Ä–µ–∂–∏–º –Ω–µ –≤—ã–±—Ä–∞–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
        st.session_state["accessibility_mode"] = "normal"
        st.markdown(NORMAL_CSS, unsafe_allow_html=True)
        st.warning("–†–µ–∂–∏–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –Ω–µ –±—ã–ª –≤—ã–±—Ä–∞–Ω, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–µ–∂–∏–º 'normal'.")
    except NameError:
        st.warning("CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–º–ø–æ—Ä—Ç css_vars.")
    except Exception as e:
        st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å CSS: {e}")


# -----------------------
# –°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å–∫–∞–Ω–∞ –∞–≤—Ç–æ–≥—Ä–∞—Ñ–∞ 
# -----------------------
    if "selected_image" in st.session_state:
        details = st.session_state["selected_image"]
        image_index = details.get("image_index", -1)
        image_path = details.get("image_path")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if not image_path or not os.path.isfile(image_path):
            st.error("–û—à–∏–±–∫–∞: –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            # –∫–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞, –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ
            if st.button("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∞—Ä—Ö–∏–≤—É"):
                 if "selected_image" in st.session_state: st.session_state.pop("selected_image")
                 st.rerun()
            return # –í—ã—Ö–æ–¥ –∏–∑ main_app, –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ

        st.header(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {image_index + 1}")
        try:
            st.image(image_path, use_container_width=True, caption=f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {image_index + 1}")
        except Exception as e:
             st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {e}")
             return # –í—ã—Ö–æ–¥, –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è

        st.subheader("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∞–≤—Ç–æ–≥—Ä–∞—Ñ–∞")
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LLM 
        try:
             # –£–∫–∞–∂–∏—Ç–µ –º–æ–¥–µ–ª—å 
             llm_sol = llm_solution(model='gemini-2.0-flash-thinking-exp-01-21') 
        except NameError:
             st.error("–ö–ª–∞—Å—Å llm_solution –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–º–ø–æ—Ä—Ç.")
             llm_sol = None
        except Exception as e:
             st.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ LLM: {e}")
             llm_sol = None

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª—é—á–∏ –≤ session_state, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç 
        if "ocr_text_results" not in st.session_state: st.session_state["ocr_text_results"] = {}
        if "easy_text_results" not in st.session_state: st.session_state["easy_text_results"] = {}
        if "tei_text_results" not in st.session_state: st.session_state["tei_text_results"] = {}
        if "desc_text_results" not in st.session_state: st.session_state["desc_text_results"] = {}

        image_key = image_path # –ö–ª—é—á –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ 
        def download_text(text, filename, mime, label="üìÑ", help_text="–°–∫–∞—á–∞—Ç—å —Ç–µ–∫—Å—Ç"):
             # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –∏ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
             try:
                 data = text.encode('utf-8') if isinstance(text, str) else bytes(text)
             except Exception as e:
                 st.error(f"–û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {e}")
                 data = b"" # –ü—É—Å—Ç—ã–µ –±–∞–π—Ç—ã –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏

             # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–ª—é—á–∞ –¥–ª—è download_button
             download_key = f"download_{filename.replace('.', '_').replace(os.sep, '_')}"
             st.download_button(label=label,
                                data=data,
                                file_name=filename,
                                mime=mime,
                                key=download_key,
                                help=help_text)

        # –ö–Ω–æ–ø–∫–∏ –∏ –ª–æ–≥–∏–∫–∞ LLM (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ llm_sol —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω)
        if llm_sol:
            if st.button("–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç"):
                with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."):
                    try:
                        ocr_text = llm_sol.image_to_text(image_path)
                        st.session_state["ocr_text_results"][image_key] = ocr_text
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ OCR: {e}")

            if image_key in st.session_state["ocr_text_results"]:
                col1, col2 = st.columns([9, 1])
                with col1:
                    st.text_area("–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç", value=st.session_state["ocr_text_results"][image_key], height=350, key=f"ocr_{image_key}")
                with col2:
                    # –ü–µ—Ä–µ–¥–∞–µ–º –±–∞–π—Ç—ã –≤ —Ñ—É–Ω–∫—Ü–∏—é —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                    try:
                        ocr_bytes = st.session_state["ocr_text_results"][image_key].encode('utf-8')
                    except:
                        ocr_bytes = b""
                    download_text(ocr_bytes, f"ocr_{os.path.basename(image_key)}.txt", "text/plain")

                # –ö–Ω–æ–ø–∫–∏ –∑–∞–≤–∏—Å—è—Ç –æ—Ç –Ω–∞–ª–∏—á–∏—è OCR —Ç–µ–∫—Å—Ç–∞
                if st.button("–ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —è—Å–Ω—ã–π —è–∑—ã–∫"):
                    with st.spinner("–ê–¥–∞–ø—Ç–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."):
                        try:
                            easy_text = llm_sol.text_easy_lang(st.session_state["ocr_text_results"][image_key])
                            st.session_state["easy_text_results"][image_key] = easy_text
                        except Exception as e:
                            st.error(f"–û—à–∏–±–∫–∞ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏: {e}")

                if image_key in st.session_state["easy_text_results"]:
                    col1, col2 = st.columns([9, 1])
                    with col1:
                        st.text_area("–¢–µ–∫—Å—Ç –Ω–∞ —è—Å–Ω–æ–º —è–∑—ã–∫–µ", value=st.session_state["easy_text_results"][image_key].replace("**", ""), height=350, key=f"easy_{image_key}")
                    with col2:
                         try:
                             easy_bytes = st.session_state["easy_text_results"][image_key].encode('utf-8')
                         except:
                             easy_bytes = b""
                         download_text(easy_bytes, f"easy_{os.path.basename(image_key)}.txt", "text/plain")

                if st.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å TEI-—Ä–∞–∑–º–µ—Ç–∫—É"):
                     with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è TEI-—Ä–∞–∑–º–µ—Ç–∫–∏, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."):
                         try:
                             tei_text = llm_sol.tei_generation(st.session_state["ocr_text_results"][image_key], image_path)
                             st.session_state["tei_text_results"][image_key] = tei_text
                         except Exception as e:
                             st.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ TEI: {e}")

                if image_key in st.session_state["tei_text_results"]:
                    col1, col2 = st.columns([9, 1])
                    with col1:
                        st.code(st.session_state["tei_text_results"][image_key], language="xml")
                    with col2:
                         try:
                             tei_bytes = st.session_state["tei_text_results"][image_key].encode('utf-8')
                         except:
                             tei_bytes = b""
                         download_text(tei_bytes, f"tei_{os.path.basename(image_key)}.xml", "text/xml", label="</>", help_text="–°–∫–∞—á–∞—Ç—å xml")

            if st.button("–¢–∏—Ñ–ª–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"):
                 with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."):
                     try:
                        desc_text = llm_sol.generate_description(image_path)
                        # –û—á–∏—Å—Ç–∫–∞
                        cleaned_desc = re.sub(" +", " ", re.sub(r"\*", "", desc_text)).strip() 
                        st.session_state["desc_text_results"][image_key] = cleaned_desc
                     except Exception as e:
                         st.error(f"–û—à–∏–±–∫–∞ —Ç–∏—Ñ–ª–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

            if image_key in st.session_state["desc_text_results"]:
                desc_text = st.session_state["desc_text_results"][image_key]

                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∞—É–¥–∏–æ
                if f"speech_audio_{image_key}" not in st.session_state:
                    st.session_state[f"speech_audio_{image_key}"] = None
                if f"show_audio_player_{image_key}" not in st.session_state:
                    st.session_state[f"show_audio_player_{image_key}"] = False

                col1, col2 = st.columns([9, 1])
                with col1:
                    st.text_area("–¢–∏—Ñ–ª–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", value=desc_text, height=350, key=f"desc_{image_key}")
                with col2:
                    try:
                         desc_bytes = desc_text.encode('utf-8')
                    except:
                         desc_bytes = b""
                    download_text(desc_bytes, f"desc_{os.path.basename(image_key)}.txt", "text/plain")

                    if st.button("üîä", key=f"speak_desc_{image_key}", help="–û–∑–≤—É—á–∏—Ç—å —Ç–∏—Ñ–ª–æ–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"):
                        if desc_text:
                            with st.spinner(""):
                                try:
                                    # –í—ã–∑—ã–≤–∞–µ–º –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
                                    speech_output, sampling_rate = generate_speech(desc_text)
                                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ session_state
                                    st.session_state[f"speech_audio_{image_key}"] = (speech_output, sampling_rate)
                                    st.session_state[f"show_audio_player_{image_key}"] = True # –ü–æ–∫–∞–∑–∞—Ç—å –ø–ª–µ–µ—Ä
                                    st.rerun() # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç, —á—Ç–æ–±—ã –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –ø–ª–µ–µ—Ä –Ω–∏–∂–µ
                                except ImportError as e:
                                    st.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—á–∏: {e}. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
                                except Exception as e:
                                    st.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—á–∏: {e}")
                                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞—É–¥–∏–æ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                                    st.session_state[f"speech_audio_{image_key}"] = None
                                    st.session_state[f"show_audio_player_{image_key}"] = False
                        else:
                            st.warning("–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è.")

                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∞—É–¥–∏–æ–ø–ª–µ–µ—Ä –ø–æ–¥ –∫–æ–ª–æ–Ω–∫–∞–º–∏, –µ—Å–ª–∏ –∞—É–¥–∏–æ –±—ã–ª–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ
                if st.session_state[f"show_audio_player_{image_key}"]:
                    audio_data = st.session_state.get(f"speech_audio_{image_key}")
                    if audio_data is not None:
                        speech_output, sampling_rate = audio_data
                        st.audio(speech_output, sample_rate=sampling_rate, format='audio/wav')
                    else:
                        # –≠—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –≤–æ–∑–Ω–∏–∫–∞—Ç—å –ø—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–µ, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
                        st.warning("–ê—É–¥–∏–æ –±—ã–ª–æ –∑–∞–ø—Ä–æ—à–µ–Ω–æ, –Ω–æ –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
                        st.session_state[f"show_audio_player_{image_key}"] = False # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥

        if st.button("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∞—Ä—Ö–∏–≤—É"):
            st.session_state.pop("selected_image")
            st.rerun()

# -----------------------
# –°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∞—Ä—Ö–∏–≤–∞ (–∞–≤—Ç–æ–≥—Ä–∞—Ñ–∞) 
# -----------------------
    elif "selected_archive" in st.session_state:
        details = st.session_state["selected_archive"]
        author = details.get("author", "N/A")
        archive_type = details.get("archive_type", "N/A")
        archive = details.get("archive", "N/A")

        st.header(f"{author} - {archive_type} - {archive}")

        # –∫–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –æ–±—â–µ–º—É —Å–ø–∏—Å–∫—É/–ø–æ–∏—Å–∫—É 
        if st.button("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –∞—Ä—Ö–∏–≤–∞", key="back_to_main_from_archive"):
             st.session_state.pop("selected_archive")
             # –û—á–∏—â–∞–µ–º –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
             if "selected_image" in st.session_state:
                 st.session_state.pop("selected_image")
             st.rerun()

        meta = load_metadata(author, archive_type, archive)
        if meta is not None:
            st.subheader("–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ")
            st.dataframe(meta) 
        else:
            st.write("–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.") 

        st.subheader("–°–∫–∞–Ω –∞–≤—Ç–æ–≥—Ä–∞—Ñ–∞")
        images = get_image_paths(author, archive_type, archive)
        if images:
            num_columns = 4 
            cols = st.columns(num_columns)
            for i, img_path in enumerate(images):
                 with cols[i % num_columns]:
                     # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
                     if os.path.isfile(img_path):
                         try:
                            st.image(img_path, width=500) 
                         except Exception as e:
                             st.warning(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä. —Å—Ç—Ä. {i+1}: {e}")
                         button_key = f"page_{archive.replace(' ','_')}_{i}"
                         if st.button(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {i+1}", key=button_key, help="–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Å–∫–∞–Ω"):
                             st.session_state["selected_image"] = {
                                 "author": author,
                                 "archive_type": archive_type,
                                 "archive": archive,
                                 "image_index": i,
                                 "image_path": img_path
                             }
                             st.rerun()
                     else:
                          st.warning(f"–°—Ç—Ä. {i+1} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        else:
            st.info("–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –¥–∞–Ω–Ω–æ–º –∞—Ä—Ö–∏–≤–µ.") 

        st.subheader("–°–∫–∞—á–∞—Ç—å –∞–≤—Ç–æ–≥—Ä–∞—Ñ")
        col1, col2 = st.columns(2)
        with col1:
            pdf_buffer = download_pdf(author, archive_type, archive)
            st.download_button("–°–∫–∞—á–∞—Ç—å PDF üìë", data=pdf_buffer, file_name=f"{archive}.pdf", mime="application/pdf")
        with col2:
            zip_buffer = download_images_zip(author, archive_type, archive)
            st.download_button("–°–∫–∞—á–∞—Ç—å PNG –∞—Ä—Ö–∏–≤ üéûÔ∏è", data=zip_buffer, file_name=f"{archive}.zip", mime="application/zip")

    # –ï—Å–ª–∏ –Ω–∏ –∞—Ä—Ö–∏–≤, –Ω–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é 
    else:
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ 
        st.title("–ê—Ä—Ö–∏–≤ –∞–≤—Ç–æ–≥—Ä–∞—Ñ–æ–≤ –ø–∏—Å–∞—Ç–µ–ª–µ–π 20 –≤–µ–∫–∞")
        st.write("–ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –∞–≤—Ç–æ–≥—Ä–∞—Ñ—ã, —á–∏—Ç–∞–π—Ç–µ –∏—Ö —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É, –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —è—Å–Ω—ã–π —è–∑—ã–∫ –∏ —Ç–∏—Ñ–ª–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ. "
                 "–î–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–µ–π —Ç–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–Ω–∞ TEI-—Ä–∞–∑–º–µ—Ç–∫–∞ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ.")

        # –ú–µ–Ω—é –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ 
        # –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –≤ session_state –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–±—Ä–æ—Å–∞
        if 'menu_selection' not in st.session_state:
            st.session_state.menu_selection = "–î–æ–º–æ–π" # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        menu_options = ["–î–æ–º–æ–π", "–ü–æ–∏—Å–∫", "–û –ø—Ä–æ–µ–∫—Ç–µ"]
        try:
            # –∏–Ω–¥–µ–∫—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
            current_index = menu_options.index(st.session_state.menu_selection)
        except ValueError:
            current_index = 0 # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é "–î–æ–º–æ–π", –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
            st.session_state.menu_selection = "–î–æ–º–æ–π"

        menu = st.sidebar.radio(
            "–ù–∞–≤–∏–≥–∞—Ü–∏—è",
            menu_options,
            index=current_index,
            key="sidebar_navigation" # –∫–ª—é—á –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            )
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        st.session_state.menu_selection = menu

# -----------------------
# –†–∞–∑–¥–µ–ª ¬´–î–æ–º–æ–π¬ª: –Ω–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∫–∞—Ç–∞–ª–æ–≥–∞–º 
# -----------------------
        if menu == "–î–æ–º–æ–π":
            st.header("–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∞—Ä—Ö–∏–≤–∞–º")
            authors = list_authors()
            if not authors:
                st.error("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–≤—Ç–æ—Ä–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ.")
            else:
                selected_author = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ—Ä–∞", authors)
                if selected_author: # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∞–≤—Ç–æ—Ä –≤—ã–±—Ä–∞–Ω
                    archive_types = list_archive_types(selected_author)
                    if not archive_types:
                        st.warning("–ù–µ—Ç –∞—Ä—Ö–∏–≤–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∞–≤—Ç–æ—Ä–∞.")
                    else:
                        selected_archive_type = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞—Ä—Ö–∏–≤–∞", archive_types)
                        if selected_archive_type: # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ç–∏–ø –≤—ã–±—Ä–∞–Ω
                            archives = list_archives(selected_author, selected_archive_type)
                            if not archives:
                                st.warning("–ù–µ—Ç –∞—Ä—Ö–∏–≤–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞.")
                            else:
                                selected_archive = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∞—Ä—Ö–∏–≤", archives)
                                if selected_archive: # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∞—Ä—Ö–∏–≤ –≤—ã–±—Ä–∞–Ω

                                    st.button("–û—Ç–∫—Ä—ã—Ç—å –∞—Ä—Ö–∏–≤",
                                              key="open_archive_home_button", # –î–æ–±–∞–≤–ª–µ–Ω –∫–ª—é—á
                                              on_click=select_archive_callback,
                                              args=(selected_author, selected_archive_type, selected_archive))

# -----------------------
# –†–∞–∑–¥–µ–ª ¬´–ü–æ–∏—Å–∫¬ª: –ø—Ä–æ—Å—Ç–æ–π –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ 
# -----------------------
        elif menu == "–ü–æ–∏—Å–∫":
            st.header("–ü–æ–∏—Å–∫ –∞—Ä—Ö–∏–≤–æ–≤")
            tab1, tab2 = st.tabs(["–ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫", "–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫"])

            with tab1:
                st.subheader("–ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫")
                search_query = st.text_input("–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (–ø–æ —Ç–µ–∫—Å—Ç—É –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö)")
                if st.button("–ù–∞–π—Ç–∏ (–ø—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫)"):
                    results = []
                    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
                    if search_query:
                        with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∏—Å–∫..."): 
                            for author in list_authors():
                                for arch_type in list_archive_types(author):
                                    for archive in list_archives(author, arch_type):
                                        meta = load_metadata(author, arch_type, archive)
                                        if meta is not None:
                                            try: # –î–æ–±–∞–≤–ª–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –Ω–∞ —Å–ª—É—á–∞–π –Ω–µ-—Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                                                meta_str = meta.to_string().lower()
                                                if search_query.lower() in meta_str:
                                                    results.append({"author": author,
                                                                    "archive_type": arch_type,
                                                                    "archive": archive})
                                            except AttributeError: # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ to_string –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
                                                continue
                    # –õ–æ–≥–∏–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ 
                    if results:
                        st.write(f"–ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
                        for idx, res in enumerate(results):
                             button_label = f"{res['author']} - {res['archive_type']} - {res['archive']}"
                             button_key = f"res_{res['author']}_{res['archive_type']}_{res['archive']}_{idx}"
                             st.button(button_label,
                                       key=button_key,
                                       on_click=select_archive_callback,
                                       args=(res['author'], res['archive_type'], res['archive']))

                    # –°–æ–æ–±—â–µ–Ω–∏–µ "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" 
                    elif search_query: # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–∏—Å–∫ –±—ã–ª –≤—ã–ø–æ–ª–Ω–µ–Ω
                         st.write("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                    else: # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø—É—Å—Ç–æ–π
                         st.info("–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞.")

            with tab2:
                st.subheader("–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫")
                # –õ–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–≤—Ç–æ—Ä–∞/—Ç–∏–ø–∞/–≥–æ–¥–∞ 
                selected_author_ext = st.selectbox("–ê–≤—Ç–æ—Ä", [""] + list_authors(), key="adv_author")
                if selected_author_ext:
                    archive_types_ext = list_archive_types(selected_author_ext)
                else:
                    archive_types_ext = []
                selected_archive_type_ext = st.selectbox("–¢–∏–ø –∞—Ä—Ö–∏–≤–∞", [""] + archive_types_ext, key="adv_archive_type")
                selected_year_ext = st.text_input("–ü–æ–∏—Å–∫ –ø–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º (–¥–∞—Ç–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ, —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏ —Ç.–¥.)", key="adv_year")

                if st.button("–ù–∞–π—Ç–∏ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫)"):
                    results = []
                    with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∏—Å–∫..."): 
                        authors_list = [selected_author_ext] if selected_author_ext else list_authors()
                        for author in authors_list:
                            arch_types = [selected_archive_type_ext] if selected_archive_type_ext else list_archive_types(author)
                            # –ü—Ä–æ–ø—É—Å–∫, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è –∞–≤—Ç–æ—Ä–∞
                            if selected_archive_type_ext and not arch_types:
                                continue
                            for arch_type in arch_types:
                                for archive in list_archives(author, arch_type):
                                    meta = load_metadata(author, arch_type, archive)
                                    if meta is not None:
                                         # –£—Å–ª–æ–≤–∏–µ –ø–æ–∏—Å–∫–∞ –ø–æ –≥–æ–¥—É 
                                        cond = True
                                        if selected_year_ext:
                                             try: # –î–æ–±–∞–≤–ª–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
                                                 meta_str = meta.to_string().lower()
                                                 if selected_year_ext.lower() not in meta_str: # –ü–æ–∏—Å–∫ –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ –≥–æ–¥–∞
                                                     cond = False
                                             except AttributeError:
                                                 cond = False 

                                        if cond:
                                            results.append({"author": author,
                                                            "archive_type": arch_type,
                                                            "archive": archive})
                    # –õ–æ–≥–∏–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    if results:
                        st.write(f"–ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
                        for idx, res in enumerate(results): # idx –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–ª—é—á–∞
                            button_label = f"{res['author']} - {res['archive_type']} - {res['archive']}"
                            button_key = f"adv_{res['author']}_{res['archive_type']}_{res['archive']}_{idx}"
                            st.button(
                                button_label,
                                key=button_key,
                                on_click=select_archive_callback,
                                args=(res['author'], res['archive_type'], res['archive'])
                             )
   
                    else:

                        st.write("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

# -----------------------
# –†–∞–∑–¥–µ–ª ¬´–û –ø—Ä–æ–µ–∫—Ç–µ¬ª 
# -----------------------
        elif menu == "–û –ø—Ä–æ–µ–∫—Ç–µ":
            st.header("–û –ø—Ä–æ–µ–∫—Ç–µ")
            st.write("""
                –î–∞–Ω–Ω–æ–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∞–≤—Ç–æ–≥—Ä–∞—Ñ–∞–º–∏ –ø–∏—Å–∞—Ç–µ–ª–µ–π.
                –ö–∞–∂–¥—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞–µ—Ç—Å—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏, —Å–∫–∞–Ω–∞–º–∏, —Ç–µ–∫—Å—Ç–æ–≤–æ–π —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–æ–π,
                TEI-—Ä–∞–∑–º–µ—Ç–∫–æ–π, –∞–¥–∞–ø—Ç–∞—Ü–∏–µ–π –Ω–∞ —è—Å–Ω—ã–π —è–∑—ã–∫ –∏ —Ç–∏—Ñ–ª–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º.

                **–ù–∞—à–∞ –º–∏—Å—Å–∏—è** ‚Äî —Å–¥–µ–ª–∞—Ç—å –∫—É–ª—å—Ç—É—Ä–Ω–æ–µ –Ω–∞—Å–ª–µ–¥–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã–º –∏ –∂–∏–≤—ã–º,
                –±–µ–∑ —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö, —è–∑—ã–∫–æ–≤—ã—Ö –∏–ª–∏ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã—Ö –±–∞—Ä—å–µ—Ä–æ–≤.
            """)

# -----------------------
# –õ–æ–≥–∏–∫–∞ –ø–æ–∫–∞–∑–∞ Intro Page –∏–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
# -----------------------
if "accessibility_mode" not in st.session_state:
    show_intro_page()
else:
    main_app()
